<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collapse_speed = global.collapse_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.collapse) {
    bottom_level -= global.collapse_speed;
    if (bottom_level &lt; 0)
        bottom_level = 0;
}

split_x += 0.25;
if (split_x &gt; room_width)
    split_x = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>collapse_speed = 0;
spool_x = 0;
spool_anim = 0;
bottom_level = room_height + 64;
tile_surface = -1;
split_x = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.collapse)
    draw_set_color(make_color_hsv(global.hue, 128, 128));
else
    draw_set_color(make_color_hsv(global.hue, 64, 64));
draw_rectangle(view_xview[0], view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);

if (view_yview[0] + view_hview[0] &gt; room_height) {
    draw_set_color(make_color_hsv(global.hue, 255, 16));
    draw_rectangle(view_xview[0], room_height, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
}

draw_set_color(make_color_hsv(global.hue, 255, 16));
draw_rectangle(view_xview[0], view_yview[0], 0, view_yview[0] + view_hview[0], false);
draw_rectangle(view_xview[0] + view_wview[0], view_yview[0], room_width - 1, view_yview[0] + view_hview[0], false);

if (surface_exists(tile_surface)) {
    surface_set_target(tile_surface);
    for (var i = -16; i &lt; room_width; i += 16) {
        for (var j = 0; j &lt; view_hview[0]; j += 16)
            draw_sprite(spr_tile, 0, i, j);
    }
    surface_reset_target();
}
else
    tile_surface = surface_create(room_width, view_hview[0]);
    
draw_surface(tile_surface, 0, -view_hview[0]);

if (global.collapse)
    draw_set_color(make_color_hsv(global.hue, 128, 128));
else
    draw_set_color(make_color_hsv(global.hue, 64, 64));

draw_sprite_ext(spr_bottom, 0, split_x - room_width, 0, 1, 0.25, 0, draw_get_colour(), 1);
draw_sprite_ext(spr_bottom, 0, split_x, 0, 1, 0.25, 0, draw_get_colour(), 1);

draw_sprite_ext(spr_bottom, 0, 0, bottom_level, 1, 1, 0, make_color_hsv(global.hue, 255, 16), 1);

if (view_yview[0] + view_hview[0] &gt; bottom_level) {
    draw_set_color(make_color_hsv(global.hue, 255, 16));
    draw_rectangle(view_xview[0], bottom_level, view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
